# type: ignore
from typing import Callable, List


class BaseTransformer:
    """
    Spec for the *Transformer classes
    TODO: Add a top-level 'description' field that would add
          a heredoc to the Type/Class/etc
    """
    # -- Class attributes
    # This is the main docstring that will appear at the top of each generated file
    # it must be able to handle the following format vars:
    # `{classname}`
    TOP_COMMENT: str = ...
    # Translate the yaml type names to the correct syntax in the target language
    # Ex Python: "string": "str" ; TypeScript "string": "string"
    TYPE_TRANSLATIONS: dict[str, str] = ...
    # Whitespace definition; python is 4 spaces: '    '
    WS: str = ...
    # Template for what an Optional[T] would look like syntactically
    OPTIONAL: str = ...
    # Filename for this specific Type to be written to
    # Ex; python; class User would be written to user.py
    FILENAME: str = ...
    # Template for a class/type/interface definition
    CLASS_DEF: str = ...
    # Template for a class/type/interface attribute/field definition with Type annotation
    CLASS_ATTR_WITH_T: str = ...

    # -- Instance attributes
    typedef: 'TypeDefinition' = ...
    output_file: str = ...
    output_buf: str = ...
    method_order: List[Callable] = ...
    def generate_filename(self): ...
    def generate_imports(self): ...
    def generate_top_comment(self): ...
    def generate_attributes(self): ...
    def generate_type_annotation(self, attribute_type): ...

    def write_buf(self) -> None:
        with open(self.output_file, 'w') as f:
            f.write(self.output_buf)
