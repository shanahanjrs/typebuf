from .base import BaseTransformer


class PythonTransformer(BaseTransformer):
    LANG = 'python'
    TOP_COMMENT = \
        '"""\n' \
        '{classname} type definition file generated by TypeBuf\n' \
        'Note: Any changes made to this file will be overwritten\n' \
        '      during next compilation\n' \
        '"""\n\n'
    TYPE_TRANSLATIONS = {
        'any': 'Any',
        'string': 'str',
        'int': 'int',
        'float': 'float',
        'boolean': 'bool',
        'bytes': 'str',
        'date': 'Date',
        'datetime': 'Datetime',
        'map': 'Dict',
        'array': 'List',
        'tuple': 'Tuple',
        'null': 'None',
        'double': 'float',
        'sint8': 'int',
        'sint16': 'int',
        'sint32': 'int',
        'sint64': 'int',
        'uint8': 'int',
        'uint16': 'int',
        'uint32': 'int',
        'uint64': 'int',
    }
    WS = '    '
    OPTIONAL = 'Optional[{type}]'
    FILENAME = '{classnamelower}.py'
    CLASS_DEF = 'class {classname}:\n'
    CLASS_ATTR_WITH_T = '{ws}{attrname}: {typeannotation}\n'

    def __init__(self, typedef: 'typebuf.lib.TypeDefinition'):
        self.C = self.__class__
        self.typedef = typedef
        self.output_file: str = ''
        self.output_buf: str = ''
        self.method_order = [
            self.generate_top_comment,
            self.generate_imports,
            self.generate_class_declaration,
            self.generate_attributes
        ]

    def generate_filename(self):
        self.output_file = self.C.FILENAME.format(
            classnamelower=self.typedef.typename.lower()
        )

    def generate_imports(self) -> str:
        # Figure out a good way to do this
        # Cheat for now
        """
        Will scan the typedef for any imports we might need to do and return the import str
        :param typedef:
        :return: (str) The actual import str to write to the file or just "\n" if none
        """
        if not self.typedef.imports:
            return ''
        if self.C.LANG in self.typedef.imports:
            return '\n'.join(self.typedef.imports[self.C.LANG]) + '\n\n'

    def generate_top_comment(self):
        return self.C.TOP_COMMENT.format(
            classname=self.typedef.typename.capitalize()
        )

    def generate_class_declaration(self):
        return self.C.CLASS_DEF.format(classname=self.typedef.typename)

    def generate_type_annotation(self, attribute_type):
        if attribute_type.startswith('$'):
            return attribute_type[1:]
        return self.C.TYPE_TRANSLATIONS[attribute_type]

    def generate_attributes(self) -> str:
        output_str = ''
        for attribute in self.typedef.fields:
            attrname = attribute.name
            typeannotation = self.generate_type_annotation(attribute.type)
            if attribute.optional:
                typeannotation = self.C.OPTIONAL.format(type=typeannotation)
            output_str += self.C.CLASS_ATTR_WITH_T.format(
                ws=self.C.WS, attrname=attrname,
                typeannotation=typeannotation
            )
        return output_str
